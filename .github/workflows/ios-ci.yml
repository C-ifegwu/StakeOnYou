name: iOS CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

env:
  PROJECT_PATH: StakeOnYou.xcodeproj
  WORKSPACE_PATH: StakeOnYou.xcworkspace
  DEFAULT_SCHEME: StakeOnYou
  CONFIG: Debug
  SIM_DEVICE: "iPhone 15"

jobs:
  build-test-archive:
    runs-on: macos-14

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode 15.4
        run: |
          sudo xcode-select -s "/Applications/Xcode_15.4.app/Contents/Developer"
          xcodebuild -version

      - name: Set up Ruby + xcpretty
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
        run: gem install xcpretty --no-document

      - name: Install CocoaPods if Podfile exists
        if: ${{ hashFiles('**/Podfile') != '' }}
        run: |
          sudo gem install cocoapods --no-document
          pod repo update
          pod install --project-directory=.

      - name: Resolve Swift Packages
        run: |
          if [ -f "$WORKSPACE_PATH" ]; then
            xcodebuild -resolvePackageDependencies -workspace "$WORKSPACE_PATH"
          else
            xcodebuild -resolvePackageDependencies -project "$PROJECT_PATH"
          fi

      - name: Build (Simulator)
        run: |
          DEST="platform=iOS Simulator,name=${SIM_DEVICE}"
          if [ -f "$WORKSPACE_PATH" ]; then
            xcodebuild \
              -workspace "$WORKSPACE_PATH" \
              -scheme "$DEFAULT_SCHEME" \
              -destination "$DEST" \
              -configuration "$CONFIG" \
              build | xcpretty
          else
            xcodebuild \
              -project "$PROJECT_PATH" \
              -scheme "$DEFAULT_SCHEME" \
              -destination "$DEST" \
              -configuration "$CONFIG" \
              build | xcpretty
        env:
          NSUnbufferedIO: "YES"

      - name: Test (Simulator)
        run: |
          DEST="platform=iOS Simulator,name=${SIM_DEVICE}"
          if [ -f "$WORKSPACE_PATH" ]; then
            xcodebuild \
              -workspace "$WORKSPACE_PATH" \
              -scheme "$DEFAULT_SCHEME" \
              -destination "$DEST" \
              -configuration "$CONFIG" \
              test | xcpretty
          else
            xcodebuild \
              -project "$PROJECT_PATH" \
              -scheme "$DEFAULT_SCHEME" \
              -destination "$DEST" \
              -configuration "$CONFIG" \
              test | xcpretty
        env:
          NSUnbufferedIO: "YES"

      - name: Prepare signing material (conditional)
        id: signing
        shell: bash
        run: |
          set -e
          if [ -n "${{ secrets.IOS_CERT_P12 }}" ] && [ -n "${{ secrets.IOS_CERT_PASSWORD }}" ] && [ -n "${{ secrets.IOS_MOBILEPROVISION }}" ]; then
            echo "has_signing=true" >> $GITHUB_OUTPUT
            CERT_PATH="$RUNNER_TEMP/cert.p12"
            MOBILEPROV_PATH="$RUNNER_TEMP/profile.mobileprovision"
            echo "${{ secrets.IOS_CERT_P12 }}" | base64 --decode > "$CERT_PATH"
            echo "${{ secrets.IOS_MOBILEPROVISION }}" | base64 --decode > "$MOBILEPROV_PATH"
            KEYCHAIN_PATH="$RUNNER_TEMP/build.keychain"
            KEYCHAIN_PWD="buildpass"
            security create-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN_PATH"
            security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
            security unlock-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN_PATH"
            security import "$CERT_PATH" -k "$KEYCHAIN_PATH" -P "${{ secrets.IOS_CERT_PASSWORD }}" -T /usr/bin/codesign
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            UUID=$(grep -a -o '[-A-F0-9]\{36\}' "$MOBILEPROV_PATH" | head -1)
            cp "$MOBILEPROV_PATH" ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          else
            echo "has_signing=false" >> $GITHUB_OUTPUT
          fi

      - name: Archive (generic iOS device)
        run: |
          if [ -f "$WORKSPACE_PATH" ]; then
            xcodebuild \
              -workspace "$WORKSPACE_PATH" \
              -scheme "$DEFAULT_SCHEME" \
              -configuration Release \
              -sdk iphoneos \
              archive \
              -archivePath "$RUNNER_TEMP/StakeOnYou.xcarchive" | xcpretty
          else
            xcodebuild \
              -project "$PROJECT_PATH" \
              -scheme "$DEFAULT_SCHEME" \
              -configuration Release \
              -sdk iphoneos \
              archive \
              -archivePath "$RUNNER_TEMP/StakeOnYou.xcarchive" | xcpretty

      - name: Export IPA (if signing is available)
        if: steps.signing.outputs.has_signing == 'true'
        run: |
          cat > $RUNNER_TEMP/ExportOptions.plist <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>ad-hoc</string>
            <key>signingStyle</key><string>manual</string>
            <key>stripSwiftSymbols</key><true/>
            <key>compileBitcode</key><false/>
            <key>destination</key><string>export</string>
            <key>thinning</key><string>&lt;none&gt;</string>
          </dict>
          </plist>
          PLIST
          xcodebuild -exportArchive \
            -archivePath "$RUNNER_TEMP/StakeOnYou.xcarchive" \
            -exportOptionsPlist "$RUNNER_TEMP/ExportOptions.plist" \
            -exportPath "$RUNNER_TEMP/export" | xcpretty
          ls -R "$RUNNER_TEMP/export"

      - name: Upload IPA artifact
        if: steps.signing.outputs.has_signing == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: StakeOnYou-ipa
          path: ${{ runner.temp }}/export/*.ipa

      - name: Upload xcarchive artifact (always)
        uses: actions/upload-artifact@v4
        with:
          name: StakeOnYou-archive
          path: ${{ runner.temp }}/StakeOnYou.xcarchive

      - name: Upload logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-logs
          path: |
            ~/Library/Developer/Xcode/DerivedData/**/Logs/Build
            ~/Library/Developer/Xcode/DerivedData/**/Logs/Test
