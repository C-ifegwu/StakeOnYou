name: iOS CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

env:
  PROJECT_PATH: StakeOnYou.xcodeproj
  WORKSPACE_PATH: StakeOnYou.xcworkspace
  DEFAULT_SCHEME: StakeOnYou
  CONFIG: Debug

jobs:
  build-test-archive:
    runs-on: macos-14

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode (prefer 15.4 if available)
        run: |
          if [ -d "/Applications/Xcode_15.4.app" ]; then
            sudo xcode-select -s "/Applications/Xcode_15.4.app/Contents/Developer"
          fi
          xcodebuild -version
          xcodebuild -showsdks

      - name: Install Ruby + xcpretty (for readable logs)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: false
      - run: gem install xcpretty --no-document

      - name: Cache SPM
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            ~/.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Install CocoaPods if Podfile exists
        if: ${{ hashFiles('**/Podfile') != '' }}
        run: |
          sudo gem install cocoapods --no-document
          pod repo update
          pod install --project-directory=.

      - name: Resolve Swift Packages
        run: |
          set -o pipefail
          if [ -f "$WORKSPACE_PATH" ]; then
            xcodebuild -resolvePackageDependencies -workspace "$WORKSPACE_PATH"
          else
            xcodebuild -resolvePackageDependencies -project "$PROJECT_PATH"
          fi

      - name: Detect workspace/project, scheme, simulator
        id: detect
        shell: bash
        run: |
          set -euo pipefail

          # Workspace or project
          if [ -f "$WORKSPACE_PATH" ]; then
            echo "use_ws=true" >> $GITHUB_OUTPUT
            xcrun xcodebuild -json -list -workspace "$WORKSPACE_PATH" > $RUNNER_TEMP/schemes.json || true
          else
            echo "use_ws=false" >> $GITHUB_OUTPUT
            xcrun xcodebuild -json -list -project "$PROJECT_PATH" > $RUNNER_TEMP/schemes.json || true
          fi

          # Pick first scheme if available, else default
          DETECTED_SCHEME=$(python3 - <<'PY'
import json, os, sys
p = os.environ.get('RUNNER_TEMP')
try:
  data = json.load(open(os.path.join(p,'schemes.json')))
  ws = data.get('workspace',{}).get('schemes',[])
  pr = data.get('project',{}).get('schemes',[])
  schemes = ws or pr
  schemes_sorted = sorted(schemes, key=lambda s: ('test' in s.lower(), s.lower()))
  if schemes_sorted:
    print(schemes_sorted[0])
except Exception:
  pass
PY
)
          if [ -n "${DETECTED_SCHEME:-}" ]; then
            echo "scheme=$DETECTED_SCHEME" >> $GITHUB_OUTPUT
          else
            echo "scheme=$DEFAULT_SCHEME" >> $GITHUB_OUTPUT
          fi

          # Find latest iOS runtime and a common device
          RUNTIME=$(xcrun simctl list runtimes | awk -F'[()]' '/iOS/ && /available/ {print $2}' | tail -1)
          DEVICE="iPhone 15"
          echo "runtime=$RUNTIME" >> $GITHUB_OUTPUT
          echo "device=$DEVICE" >> $GITHUB_OUTPUT

          echo "Detected scheme: ${DETECTED_SCHEME:-$DEFAULT_SCHEME}"
          echo "Runtime: $RUNTIME | Device: $DEVICE"

      - name: Boot simulator
        run: |
          set -o pipefail
          xcrun simctl list devices | cat
          UDID=$(xcrun simctl create "CI-${{ steps.detect.outputs.device }}" "${{ steps.detect.outputs.device }}" "${{ steps.detect.outputs.runtime }}") || true
          if [ -n "$UDID" ]; then
            xcrun simctl boot "$UDID" || true
            DEST="platform=iOS Simulator,id=$UDID"
          else
            DEST="platform=iOS Simulator,name=${{ steps.detect.outputs.device }}"
          fi
          echo "DESTINATION=$DEST" >> $GITHUB_ENV

      - name: List schemes (human-readable)
        run: |
          if [ "${{ steps.detect.outputs.use_ws }}" = "true" ]; then
            xcodebuild -list -workspace "$WORKSPACE_PATH" | cat
          else
            xcodebuild -list -project "$PROJECT_PATH" | cat
          fi
          echo "Using scheme: ${{ steps.detect.outputs.scheme }}"
          echo "Destination: $DESTINATION"

      - name: Build (Simulator)
        run: |
          set -o pipefail
          if [ "${{ steps.detect.outputs.use_ws }}" = "true" ]; then
            xcodebuild \
              -workspace "$WORKSPACE_PATH" \
              -scheme "${{ steps.detect.outputs.scheme }}" \
              -destination "$DESTINATION" \
              -configuration "$CONFIG" \
              build | xcpretty
          else
            xcodebuild \
              -project "$PROJECT_PATH" \
              -scheme "${{ steps.detect.outputs.scheme }}" \
              -destination "$DESTINATION" \
              -configuration "$CONFIG" \
              build | xcpretty
          fi
        env:
          NSUnbufferedIO: "YES"

      - name: Test (Simulator)
        run: |
          set -o pipefail
          if [ "${{ steps.detect.outputs.use_ws }}" = "true" ]; then
            xcodebuild \
              -workspace "$WORKSPACE_PATH" \
              -scheme "${{ steps.detect.outputs.scheme }}" \
              -destination "$DESTINATION" \
              -configuration "$CONFIG" \
              test | xcpretty
          else
            xcodebuild \
              -project "$PROJECT_PATH" \
              -scheme "${{ steps.detect.outputs.scheme }}" \
              -destination "$DESTINATION" \
              -configuration "$CONFIG" \
              test | xcpretty
          fi
        env:
          NSUnbufferedIO: "YES"

      - name: Prepare signing (conditional)
        id: signing
        shell: bash
        run: |
          set -e
          if [ -n "${{ secrets.IOS_CERT_P12 }}" ] && [ -n "${{ secrets.IOS_CERT_PASSWORD }}" ] && [ -n "${{ secrets.IOS_MOBILEPROVISION }}" ]; then
            echo "has_signing=true" >> $GITHUB_OUTPUT
            CERT_PATH="$RUNNER_TEMP/cert.p12"
            MOBILEPROV_PATH="$RUNNER_TEMP/profile.mobileprovision"
            echo "${{ secrets.IOS_CERT_P12 }}" | base64 --decode > "$CERT_PATH"
            echo "${{ secrets.IOS_MOBILEPROVISION }}" | base64 --decode > "$MOBILEPROV_PATH"
            KEYCHAIN_PATH="$RUNNER_TEMP/build.keychain"
            KEYCHAIN_PWD="buildpass"
            security create-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN_PATH"
            security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
            security unlock-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN_PATH"
            security import "$CERT_PATH" -k "$KEYCHAIN_PATH" -P "${{ secrets.IOS_CERT_PASSWORD }}" -T /usr/bin/codesign
            security list-keychain -d user -s "$KEYCHAIN_PATH" $(security list-keychain -d user | sed 's/\"//g')
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            UUID=$(grep -a -o '[-A-F0-9]\{36\}' "$MOBILEPROV_PATH" | head -1)
            cp "$MOBILEPROV_PATH" ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          else
            echo "has_signing=false" >> $GITHUB_OUTPUT
          fi

      - name: Archive (generic iOS device)
        run: |
          set -o pipefail
          if [ "${{ steps.detect.outputs.use_ws }}" = "true" ]; then
            xcodebuild \
              -workspace "$WORKSPACE_PATH" \
              -scheme "${{ steps.detect.outputs.scheme }}" \
              -configuration Release \
              -sdk iphoneos \
              archive \
              -archivePath "$RUNNER_TEMP/StakeOnYou.xcarchive" | xcpretty
          else
            xcodebuild \
              -project "$PROJECT_PATH" \
              -scheme "${{ steps.detect.outputs.scheme }}" \
              -configuration Release \
              -sdk iphoneos \
              archive \
              -archivePath "$RUNNER_TEMP/StakeOnYou.xcarchive" | xcpretty
          fi

      - name: Export IPA (when signing is available)
        if: steps.signing.outputs.has_signing == 'true'
        run: |
          cat > $RUNNER_TEMP/ExportOptions.plist <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>ad-hoc</string>
            <key>signingStyle</key><string>manual</string>
            <key>stripSwiftSymbols</key><true/>
            <key>compileBitcode</key><false/>
            <key>destination</key><string>export</string>
            <key>thinning</key><string>&lt;none&gt;</string>
          </dict>
          </plist>
          PLIST
          set -o pipefail
          xcodebuild -exportArchive \
            -archivePath "$RUNNER_TEMP/StakeOnYou.xcarchive" \
            -exportOptionsPlist "$RUNNER_TEMP/ExportOptions.plist" \
            -exportPath "$RUNNER_TEMP/export" | xcpretty
          ls -R "$RUNNER_TEMP/export" | cat

      - name: Upload IPA artifact
        if: steps.signing.outputs.has_signing == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: StakeOnYou-ipa
          path: ${{ runner.temp }}/export/*.ipa

      - name: Upload xcarchive artifact (always)
        uses: actions/upload-artifact@v4
        with:
          name: StakeOnYou-archive
          path: ${{ runner.temp }}/StakeOnYou.xcarchive

      - name: Install Fastlane (for TestFlight, conditional)
        if: ${{ secrets.APPLE_ID != '' && secrets.FASTLANE_PASSWORD != '' && secrets.TEAM_ID != '' && steps.signing.outputs.has_signing == 'true' }}
        run: |
          gem install fastlane --no-document
          fastlane --version

      - name: TestFlight upload (conditional)
        if: ${{ secrets.APPLE_ID != '' && secrets.FASTLANE_PASSWORD != '' && secrets.TEAM_ID != '' && steps.signing.outputs.has_signing == 'true' }}
        env:
          FASTLANE_USER: ${{ secrets.APPLE_ID }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          FASTLANE_TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          IPA_PATH=$(ls "$RUNNER_TEMP/export"/*.ipa | head -1)
          fastlane pilot upload --ipa "$IPA_PATH" --skip_waiting_for_build_processing true

      - name: Upload build/test logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-logs
          path: |
            ~/Library/Developer/Xcode/DerivedData/**/Logs/Build
            ~/Library/Developer/Xcode/DerivedData/**/Logs/Test
name: iOS CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_PATH: StakeOnYou.xcodeproj
  WORKSPACE_PATH: StakeOnYou.xcworkspace
  SCHEME: StakeOnYou
  SIM_DEVICE: iPhone 15
  CONFIG: Debug

jobs:
  build-test-archive:
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select latest Xcode (fallback to 15.4 if present)
        run: |
          if [ -d "/Applications/Xcode_15.4.app" ]; then
            sudo xcode-select -s "/Applications/Xcode_15.4.app/Contents/Developer"
          fi
          xcodebuild -version
          xcodebuild -showsdks

      - name: Set up Ruby (for fastlane if used later)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Install xcpretty
        run: |
          gem install xcpretty --no-document

      - name: Cache SPM
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            ~/.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Install CocoaPods if Podfile exists
        if: ${{ hashFiles('**/Podfile') != '' }}
        run: |
          sudo gem install cocoapods --no-document
          pod repo update
          pod install --project-directory=.

      - name: Resolve Swift Packages
        run: |
          if [ -f "$WORKSPACE_PATH" ]; then
            xcodebuild -resolvePackageDependencies -workspace "$WORKSPACE_PATH"
          else
            xcodebuild -resolvePackageDependencies -project "$PROJECT_PATH"
          fi

      - name: List schemes
        run: |
          if [ -f "$WORKSPACE_PATH" ]; then
            xcodebuild -list -workspace "$WORKSPACE_PATH" | cat
            xcrun xcodebuild -json -list -workspace "$WORKSPACE_PATH" > $RUNNER_TEMP/schemes.json || true
          else
            xcodebuild -list -project "$PROJECT_PATH" | cat
            xcrun xcodebuild -json -list -project "$PROJECT_PATH" > $RUNNER_TEMP/schemes.json || true
          fi
          cat $RUNNER_TEMP/schemes.json || true

      - name: Auto-detect scheme if not present
        id: autodetect
        shell: bash
        run: |
          DETECTED=$(python3 - <<'PY'
import json, os
p = os.environ.get('RUNNER_TEMP')
f = os.path.join(p, 'schemes.json')
try:
  data = json.load(open(f))
  schemes = []
  for target in data.get('project', {}).get('schemes', []): schemes.append(target)
  for target in data.get('workspace', {}).get('schemes', []): schemes.append(target)
  if schemes:
    print(schemes[0])
except Exception as e:
  pass
PY
)
          if [ -n "$DETECTED" ]; then echo "scheme=$DETECTED" >> $GITHUB_OUTPUT; else echo "scheme=$SCHEME" >> $GITHUB_OUTPUT; fi

      - name: Show selected scheme
        run: echo "Using scheme: ${{ steps.autodetect.outputs.scheme }}"

      - name: Boot simulator (best-effort)
        run: |
          xcrun simctl list devices | cat
          xcrun simctl boot "${SIM_DEVICE}" || true

      - name: Build (Simulator)
        run: |
          set -o pipefail
          if [ -f "$WORKSPACE_PATH" ]; then
            xcodebuild \
              -workspace "$WORKSPACE_PATH" \
              -scheme "${{ steps.autodetect.outputs.scheme }}" \
              -destination "platform=iOS Simulator,name=${SIM_DEVICE}" \
              -configuration "$CONFIG" \
              build | xcpretty
          else
            xcodebuild \
              -project "$PROJECT_PATH" \
              -scheme "${{ steps.autodetect.outputs.scheme }}" \
              -destination "platform=iOS Simulator,name=${SIM_DEVICE}" \
              -configuration "$CONFIG" \
              build | xcpretty
          fi
        env:
          NSUnbufferedIO: "YES"

      - name: Test (Simulator)
        run: |
          set -o pipefail
          if [ -f "$WORKSPACE_PATH" ]; then
            xcodebuild \
              -workspace "$WORKSPACE_PATH" \
              -scheme "${{ steps.autodetect.outputs.scheme }}" \
              -destination "platform=iOS Simulator,name=${SIM_DEVICE}" \
              -configuration "$CONFIG" \
              test | xcpretty
          else
            xcodebuild \
              -project "$PROJECT_PATH" \
              -scheme "${{ steps.autodetect.outputs.scheme }}" \

      - name: Upload build/test logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-logs
          path: |
            ~/Library/Logs/scan
            ~/Library/Developer/Xcode/DerivedData/**/Logs/Build
            ~/Library/Developer/Xcode/DerivedData/**/Logs/Test
              -destination "platform=iOS Simulator,name=${SIM_DEVICE}" \
              -configuration "$CONFIG" \
              test | xcpretty
          fi
        env:
          NSUnbufferedIO: "YES"

      - name: Prepare signing material (conditional)
        id: signing
        shell: bash
        run: |
          set -e
          if [ -n "${{ secrets.IOS_CERT_P12 }}" ] && [ -n "${{ secrets.IOS_CERT_PASSWORD }}" ] && [ -n "${{ secrets.IOS_MOBILEPROVISION }}" ]; then
            echo "has_signing=true" >> $GITHUB_OUTPUT
            CERT_PATH="$RUNNER_TEMP/cert.p12"
            MOBILEPROV_PATH="$RUNNER_TEMP/profile.mobileprovision"
            echo "${{ secrets.IOS_CERT_P12 }}" | base64 --decode > "$CERT_PATH"
            echo "${{ secrets.IOS_MOBILEPROVISION }}" | base64 --decode > "$MOBILEPROV_PATH"
            KEYCHAIN_PATH="$RUNNER_TEMP/build.keychain"
            KEYCHAIN_PWD="buildpass"
            security create-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN_PATH"
            security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
            security unlock-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN_PATH"
            security import "$CERT_PATH" -k "$KEYCHAIN_PATH" -P "${{ secrets.IOS_CERT_PASSWORD }}" -T /usr/bin/codesign
            security list-keychain -d user -s "$KEYCHAIN_PATH" $(security list-keychain -d user | sed 's/\"//g')
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            UUID=$(grep -a -o '[-A-F0-9]\{36\}' "$MOBILEPROV_PATH" | head -1)
            cp "$MOBILEPROV_PATH" ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          else
            echo "has_signing=false" >> $GITHUB_OUTPUT
          fi

      - name: Archive (generic iOS device)
        run: |
          set -o pipefail
          if [ -f "$WORKSPACE_PATH" ]; then
            xcodebuild \
              -workspace "$WORKSPACE_PATH" \
              -scheme "$SCHEME" \
              -configuration Release \
              -sdk iphoneos \
              archive \
              -archivePath "$RUNNER_TEMP/StakeOnYou.xcarchive" | xcpretty
          else
            xcodebuild \
              -project "$PROJECT_PATH" \
              -scheme "$SCHEME" \
              -configuration Release \
              -sdk iphoneos \
              archive \
              -archivePath "$RUNNER_TEMP/StakeOnYou.xcarchive" | xcpretty
          fi

      - name: Export IPA (conditional on signing)
        if: steps.signing.outputs.has_signing == 'true'
        run: |
          cat > $RUNNER_TEMP/ExportOptions.plist <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>ad-hoc</string>
            <key>signingStyle</key><string>manual</string>
            <key>stripSwiftSymbols</key><true/>
            <key>compileBitcode</key><false/>
            <key>destination</key><string>export</string>
            <key>thinning</key><string>&lt;none&gt;</string>
          </dict>
          </plist>
          PLIST
          set -o pipefail
          xcodebuild -exportArchive \
            -archivePath "$RUNNER_TEMP/StakeOnYou.xcarchive" \
            -exportOptionsPlist "$RUNNER_TEMP/ExportOptions.plist" \
            -exportPath "$RUNNER_TEMP/export" | xcpretty
          ls -R "$RUNNER_TEMP/export" | cat

      - name: Upload IPA artifact (conditional)
        if: steps.signing.outputs.has_signing == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: StakeOnYou-ipa
          path: ${{ runner.temp }}/export/*.ipa

      - name: Upload xcarchive artifact (always)
        uses: actions/upload-artifact@v4
        with:
          name: StakeOnYou-archive
          path: ${{ runner.temp }}/StakeOnYou.xcarchive

      - name: Install fastlane (conditional for TestFlight)
        if: ${{ secrets.APPLE_ID != '' && secrets.FASTLANE_PASSWORD != '' && secrets.TEAM_ID != '' }}
        run: |
          gem install fastlane --no-document
          fastlane --version

      - name: TestFlight upload (conditional)
        if: ${{ secrets.APPLE_ID != '' && secrets.FASTLANE_PASSWORD != '' && secrets.TEAM_ID != '' && steps.signing.outputs.has_signing == 'true' }}
        env:
          FASTLANE_USER: ${{ secrets.APPLE_ID }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          FASTLANE_TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          IPA_PATH=$(ls "$RUNNER_TEMP/export"/*.ipa | head -1)
          fastlane pilot upload --ipa "$IPA_PATH" --skip_waiting_for_build_processing true
name: iOS CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 15.4
        run: sudo xcode-select -s "/Applications/Xcode_15.4.app/Contents/Developer"

      - name: Show Xcode version
        run: xcodebuild -version

      - name: List schemes
        run: xcodebuild -list -project StakeOnYou.xcodeproj | cat

      - name: Build (Simulator)
        run: |
          xcodebuild \
            -project StakeOnYou.xcodeproj \
            -scheme StakeOnYou \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=16.4' \
            -configuration Debug \
            build | xcpretty
        env:
          NSUnbufferedIO: "YES"

      - name: Test (Simulator)
        run: |
          xcodebuild \
            -project StakeOnYou.xcodeproj \
            -scheme StakeOnYou \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=16.4' \
            -configuration Debug \
            test | xcpretty
        env:
          NSUnbufferedIO: "YES"


